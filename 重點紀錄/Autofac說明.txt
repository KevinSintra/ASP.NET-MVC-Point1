AutoFac說明: 

    // 第一步，建立ContainerBuilder
    var builder = new ContainerBuilder();

    // 開始 第二步，註冊service

    // 註冊ConsoleLogger這個class為ILogger Service的Component
    builder.RegisterType<ConsoleLogger>.As<ILogger>();

    // 註冊自己實例化出來的物件
    // 上面是只註冊class type（因此，用到的時候是autofac幫你new出來），這邊是直接用這個object
    var output = new StringWriter();
    builder.RegisterInstance(output).As<TextWriter>();

    // 用lambda 註冊會更有彈性，因為傳進來的c是container的instance，因此可以用c來做一些複雜的東西。
    builder.Register(c => new ConfigReader("mysection")).As<IConfigReader>();

    // 假設不想要一個一個註冊，可以用scan的方式。
    // 下面scan一個assembly所有的type，當那個type的名字最後結尾是Repository的時候，
    // 把它註冊的service設為這個class的interface
    builder.RegisterAssemblyTypes(myAssembly)
     .Where(t => t.Name.EndsWith("Repository"))
     .AsImplementedInterfaces();

    
 
    // 第三步，註冊都完成了，建立自己的container
    var container = builder.Build();
     
    // 第四部，從container取得對應的component。
    // 這邊用using包起來，因為出了這個scope，一切Resolve出來的都會被釋放掉。
    // 這部份在我們整個系列碰到並不多，因為不建議自己每一個這樣取出來，
    // 而是用深度整合的方式來讓一切像自動發生。
    // 詳細之後就會比較清楚
    using(var scope = container.BeginLifetimeScope())
    {
      var reader = container.Resolve<IConfigReader>();
    }